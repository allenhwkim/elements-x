import { setElementHTML } from '../common/util'

// <x-switch value="1">
//   <div when="1"> value 1 </>
//   <div when="2"> value 2</template>
// </x-switch>
class XSwitch extends HTMLElement {
  // disconnectedCallBack() {}
  // adoptedCallback() {}
  // attributeChangedCallback(name, oldValue, newValue) {}
  static get observedAttributes() { return ['value']; }

  constructor(...args) {
    const self = super(...args);
    this.templates;
    return self;
  }

  connectedCallback() {
    this.templates = Array.from(this.querySelectorAll('[when]'))
      .map(el => {
        const [cond, html] = [el.getAttribute('when'), el.outerHTML];
        el.remove();  // remove the org template;
        return [cond, html];
      });
    this._renderHTML(this.getAttribute('value'));
  }
  
  attributeChangedCallback(name, oldValue, newValue) {
    oldValue && this._renderHTML(newValue);
  }

  _renderHTML(value) {
    const template = this.templates.find(el => el[0] == value);
    if (template) {
      // this.innerHTML = template[1];
      setElementHTML(this, template[1]);
    }
  }
}

if (!customElements.get('x-switch')) {
  customElements.define('x-switch', XSwitch);
}
